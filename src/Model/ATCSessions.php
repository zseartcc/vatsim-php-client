<?php
/**
 * ATCSessions
 *
 * PHP version 5
 *
 * @category Class
 * @package  VATSIM\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATSIM API
 *
 * API for VATSIM. This API only accepts and returns application/json - e-mail api@vatsim.net for troubleshooting
 *
 * OpenAPI spec version: v1
 * Contact: api@vatsim.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATSIM\Client\Model;

use \ArrayAccess;
use \VATSIM\Client\ObjectSerializer;

/**
 * ATCSessions Class Doc Comment
 *
 * @category Class
 * @package  VATSIM\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ATCSessions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ATCSessions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'connectionId' => 'int',
        'start' => 'string',
        'end' => 'string',
        'server' => 'string',
        'vatsimId' => 'string',
        'type' => 'string',
        'rating' => 'string',
        'callsign' => 'string',
        'timesHeldCallsign' => 'string',
        'minutesOnCallsign' => 'string',
        'totalMinutesOnCallsign' => 'string',
        'aircrafttracked' => 'int',
        'aircraftseen' => 'int',
        'flightsamended' => 'int',
        'handoffsinitiated' => 'int',
        'handoffsreceived' => 'int',
        'handoffsrefused' => 'int',
        'squawksassigned' => 'int',
        'cruisealtsmodified' => 'int',
        'tempaltsmodified' => 'int',
        'scratchpadmods' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'connectionId' => null,
        'start' => null,
        'end' => null,
        'server' => null,
        'vatsimId' => null,
        'type' => null,
        'rating' => null,
        'callsign' => null,
        'timesHeldCallsign' => null,
        'minutesOnCallsign' => null,
        'totalMinutesOnCallsign' => null,
        'aircrafttracked' => null,
        'aircraftseen' => null,
        'flightsamended' => null,
        'handoffsinitiated' => null,
        'handoffsreceived' => null,
        'handoffsrefused' => null,
        'squawksassigned' => null,
        'cruisealtsmodified' => null,
        'tempaltsmodified' => null,
        'scratchpadmods' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connectionId' => 'connection_id',
        'start' => 'start',
        'end' => 'end',
        'server' => 'server',
        'vatsimId' => 'vatsim_id',
        'type' => 'type',
        'rating' => 'rating',
        'callsign' => 'callsign',
        'timesHeldCallsign' => 'times_held_callsign',
        'minutesOnCallsign' => 'minutes_on_callsign',
        'totalMinutesOnCallsign' => 'total_minutes_on_callsign',
        'aircrafttracked' => 'aircrafttracked',
        'aircraftseen' => 'aircraftseen',
        'flightsamended' => 'flightsamended',
        'handoffsinitiated' => 'handoffsinitiated',
        'handoffsreceived' => 'handoffsreceived',
        'handoffsrefused' => 'handoffsrefused',
        'squawksassigned' => 'squawksassigned',
        'cruisealtsmodified' => 'cruisealtsmodified',
        'tempaltsmodified' => 'tempaltsmodified',
        'scratchpadmods' => 'scratchpadmods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connectionId' => 'setConnectionId',
        'start' => 'setStart',
        'end' => 'setEnd',
        'server' => 'setServer',
        'vatsimId' => 'setVatsimId',
        'type' => 'setType',
        'rating' => 'setRating',
        'callsign' => 'setCallsign',
        'timesHeldCallsign' => 'setTimesHeldCallsign',
        'minutesOnCallsign' => 'setMinutesOnCallsign',
        'totalMinutesOnCallsign' => 'setTotalMinutesOnCallsign',
        'aircrafttracked' => 'setAircrafttracked',
        'aircraftseen' => 'setAircraftseen',
        'flightsamended' => 'setFlightsamended',
        'handoffsinitiated' => 'setHandoffsinitiated',
        'handoffsreceived' => 'setHandoffsreceived',
        'handoffsrefused' => 'setHandoffsrefused',
        'squawksassigned' => 'setSquawksassigned',
        'cruisealtsmodified' => 'setCruisealtsmodified',
        'tempaltsmodified' => 'setTempaltsmodified',
        'scratchpadmods' => 'setScratchpadmods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connectionId' => 'getConnectionId',
        'start' => 'getStart',
        'end' => 'getEnd',
        'server' => 'getServer',
        'vatsimId' => 'getVatsimId',
        'type' => 'getType',
        'rating' => 'getRating',
        'callsign' => 'getCallsign',
        'timesHeldCallsign' => 'getTimesHeldCallsign',
        'minutesOnCallsign' => 'getMinutesOnCallsign',
        'totalMinutesOnCallsign' => 'getTotalMinutesOnCallsign',
        'aircrafttracked' => 'getAircrafttracked',
        'aircraftseen' => 'getAircraftseen',
        'flightsamended' => 'getFlightsamended',
        'handoffsinitiated' => 'getHandoffsinitiated',
        'handoffsreceived' => 'getHandoffsreceived',
        'handoffsrefused' => 'getHandoffsrefused',
        'squawksassigned' => 'getSquawksassigned',
        'cruisealtsmodified' => 'getCruisealtsmodified',
        'tempaltsmodified' => 'getTempaltsmodified',
        'scratchpadmods' => 'getScratchpadmods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connectionId'] = isset($data['connectionId']) ? $data['connectionId'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['server'] = isset($data['server']) ? $data['server'] : null;
        $this->container['vatsimId'] = isset($data['vatsimId']) ? $data['vatsimId'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['callsign'] = isset($data['callsign']) ? $data['callsign'] : null;
        $this->container['timesHeldCallsign'] = isset($data['timesHeldCallsign']) ? $data['timesHeldCallsign'] : null;
        $this->container['minutesOnCallsign'] = isset($data['minutesOnCallsign']) ? $data['minutesOnCallsign'] : null;
        $this->container['totalMinutesOnCallsign'] = isset($data['totalMinutesOnCallsign']) ? $data['totalMinutesOnCallsign'] : null;
        $this->container['aircrafttracked'] = isset($data['aircrafttracked']) ? $data['aircrafttracked'] : null;
        $this->container['aircraftseen'] = isset($data['aircraftseen']) ? $data['aircraftseen'] : null;
        $this->container['flightsamended'] = isset($data['flightsamended']) ? $data['flightsamended'] : null;
        $this->container['handoffsinitiated'] = isset($data['handoffsinitiated']) ? $data['handoffsinitiated'] : null;
        $this->container['handoffsreceived'] = isset($data['handoffsreceived']) ? $data['handoffsreceived'] : null;
        $this->container['handoffsrefused'] = isset($data['handoffsrefused']) ? $data['handoffsrefused'] : null;
        $this->container['squawksassigned'] = isset($data['squawksassigned']) ? $data['squawksassigned'] : null;
        $this->container['cruisealtsmodified'] = isset($data['cruisealtsmodified']) ? $data['cruisealtsmodified'] : null;
        $this->container['tempaltsmodified'] = isset($data['tempaltsmodified']) ? $data['tempaltsmodified'] : null;
        $this->container['scratchpadmods'] = isset($data['scratchpadmods']) ? $data['scratchpadmods'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['connectionId'] === null) {
            $invalidProperties[] = "'connectionId' can't be null";
        }
        if ($this->container['aircrafttracked'] === null) {
            $invalidProperties[] = "'aircrafttracked' can't be null";
        }
        if (($this->container['aircrafttracked'] > 65535)) {
            $invalidProperties[] = "invalid value for 'aircrafttracked', must be smaller than or equal to 65535.";
        }

        if (($this->container['aircrafttracked'] < 0)) {
            $invalidProperties[] = "invalid value for 'aircrafttracked', must be bigger than or equal to 0.";
        }

        if ($this->container['aircraftseen'] === null) {
            $invalidProperties[] = "'aircraftseen' can't be null";
        }
        if (($this->container['aircraftseen'] > 65535)) {
            $invalidProperties[] = "invalid value for 'aircraftseen', must be smaller than or equal to 65535.";
        }

        if (($this->container['aircraftseen'] < 0)) {
            $invalidProperties[] = "invalid value for 'aircraftseen', must be bigger than or equal to 0.";
        }

        if ($this->container['flightsamended'] === null) {
            $invalidProperties[] = "'flightsamended' can't be null";
        }
        if (($this->container['flightsamended'] > 65535)) {
            $invalidProperties[] = "invalid value for 'flightsamended', must be smaller than or equal to 65535.";
        }

        if (($this->container['flightsamended'] < 0)) {
            $invalidProperties[] = "invalid value for 'flightsamended', must be bigger than or equal to 0.";
        }

        if ($this->container['handoffsinitiated'] === null) {
            $invalidProperties[] = "'handoffsinitiated' can't be null";
        }
        if (($this->container['handoffsinitiated'] > 65535)) {
            $invalidProperties[] = "invalid value for 'handoffsinitiated', must be smaller than or equal to 65535.";
        }

        if (($this->container['handoffsinitiated'] < 0)) {
            $invalidProperties[] = "invalid value for 'handoffsinitiated', must be bigger than or equal to 0.";
        }

        if ($this->container['handoffsreceived'] === null) {
            $invalidProperties[] = "'handoffsreceived' can't be null";
        }
        if (($this->container['handoffsreceived'] > 65535)) {
            $invalidProperties[] = "invalid value for 'handoffsreceived', must be smaller than or equal to 65535.";
        }

        if (($this->container['handoffsreceived'] < 0)) {
            $invalidProperties[] = "invalid value for 'handoffsreceived', must be bigger than or equal to 0.";
        }

        if ($this->container['handoffsrefused'] === null) {
            $invalidProperties[] = "'handoffsrefused' can't be null";
        }
        if (($this->container['handoffsrefused'] > 65535)) {
            $invalidProperties[] = "invalid value for 'handoffsrefused', must be smaller than or equal to 65535.";
        }

        if (($this->container['handoffsrefused'] < 0)) {
            $invalidProperties[] = "invalid value for 'handoffsrefused', must be bigger than or equal to 0.";
        }

        if ($this->container['squawksassigned'] === null) {
            $invalidProperties[] = "'squawksassigned' can't be null";
        }
        if (($this->container['squawksassigned'] > 65535)) {
            $invalidProperties[] = "invalid value for 'squawksassigned', must be smaller than or equal to 65535.";
        }

        if (($this->container['squawksassigned'] < 0)) {
            $invalidProperties[] = "invalid value for 'squawksassigned', must be bigger than or equal to 0.";
        }

        if ($this->container['cruisealtsmodified'] === null) {
            $invalidProperties[] = "'cruisealtsmodified' can't be null";
        }
        if (($this->container['cruisealtsmodified'] > 65535)) {
            $invalidProperties[] = "invalid value for 'cruisealtsmodified', must be smaller than or equal to 65535.";
        }

        if (($this->container['cruisealtsmodified'] < 0)) {
            $invalidProperties[] = "invalid value for 'cruisealtsmodified', must be bigger than or equal to 0.";
        }

        if ($this->container['tempaltsmodified'] === null) {
            $invalidProperties[] = "'tempaltsmodified' can't be null";
        }
        if (($this->container['tempaltsmodified'] > 65535)) {
            $invalidProperties[] = "invalid value for 'tempaltsmodified', must be smaller than or equal to 65535.";
        }

        if (($this->container['tempaltsmodified'] < 0)) {
            $invalidProperties[] = "invalid value for 'tempaltsmodified', must be bigger than or equal to 0.";
        }

        if ($this->container['scratchpadmods'] === null) {
            $invalidProperties[] = "'scratchpadmods' can't be null";
        }
        if (($this->container['scratchpadmods'] > 65535)) {
            $invalidProperties[] = "invalid value for 'scratchpadmods', must be smaller than or equal to 65535.";
        }

        if (($this->container['scratchpadmods'] < 0)) {
            $invalidProperties[] = "invalid value for 'scratchpadmods', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connectionId
     *
     * @return int
     */
    public function getConnectionId()
    {
        return $this->container['connectionId'];
    }

    /**
     * Sets connectionId
     *
     * @param int $connectionId connectionId
     *
     * @return $this
     */
    public function setConnectionId($connectionId)
    {
        $this->container['connectionId'] = $connectionId;

        return $this;
    }

    /**
     * Gets start
     *
     * @return string
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string $start start
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     *
     * @return string
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param string $end end
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string $server server
     *
     * @return $this
     */
    public function setServer($server)
    {
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets vatsimId
     *
     * @return string
     */
    public function getVatsimId()
    {
        return $this->container['vatsimId'];
    }

    /**
     * Sets vatsimId
     *
     * @param string $vatsimId vatsimId
     *
     * @return $this
     */
    public function setVatsimId($vatsimId)
    {
        $this->container['vatsimId'] = $vatsimId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return string
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param string $rating rating
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets callsign
     *
     * @return string
     */
    public function getCallsign()
    {
        return $this->container['callsign'];
    }

    /**
     * Sets callsign
     *
     * @param string $callsign callsign
     *
     * @return $this
     */
    public function setCallsign($callsign)
    {
        $this->container['callsign'] = $callsign;

        return $this;
    }

    /**
     * Gets timesHeldCallsign
     *
     * @return string
     */
    public function getTimesHeldCallsign()
    {
        return $this->container['timesHeldCallsign'];
    }

    /**
     * Sets timesHeldCallsign
     *
     * @param string $timesHeldCallsign timesHeldCallsign
     *
     * @return $this
     */
    public function setTimesHeldCallsign($timesHeldCallsign)
    {
        $this->container['timesHeldCallsign'] = $timesHeldCallsign;

        return $this;
    }

    /**
     * Gets minutesOnCallsign
     *
     * @return string
     */
    public function getMinutesOnCallsign()
    {
        return $this->container['minutesOnCallsign'];
    }

    /**
     * Sets minutesOnCallsign
     *
     * @param string $minutesOnCallsign minutesOnCallsign
     *
     * @return $this
     */
    public function setMinutesOnCallsign($minutesOnCallsign)
    {
        $this->container['minutesOnCallsign'] = $minutesOnCallsign;

        return $this;
    }

    /**
     * Gets totalMinutesOnCallsign
     *
     * @return string
     */
    public function getTotalMinutesOnCallsign()
    {
        return $this->container['totalMinutesOnCallsign'];
    }

    /**
     * Sets totalMinutesOnCallsign
     *
     * @param string $totalMinutesOnCallsign totalMinutesOnCallsign
     *
     * @return $this
     */
    public function setTotalMinutesOnCallsign($totalMinutesOnCallsign)
    {
        $this->container['totalMinutesOnCallsign'] = $totalMinutesOnCallsign;

        return $this;
    }

    /**
     * Gets aircrafttracked
     *
     * @return int
     */
    public function getAircrafttracked()
    {
        return $this->container['aircrafttracked'];
    }

    /**
     * Sets aircrafttracked
     *
     * @param int $aircrafttracked aircrafttracked
     *
     * @return $this
     */
    public function setAircrafttracked($aircrafttracked)
    {

        if (($aircrafttracked > 65535)) {
            throw new \InvalidArgumentException('invalid value for $aircrafttracked when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($aircrafttracked < 0)) {
            throw new \InvalidArgumentException('invalid value for $aircrafttracked when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['aircrafttracked'] = $aircrafttracked;

        return $this;
    }

    /**
     * Gets aircraftseen
     *
     * @return int
     */
    public function getAircraftseen()
    {
        return $this->container['aircraftseen'];
    }

    /**
     * Sets aircraftseen
     *
     * @param int $aircraftseen aircraftseen
     *
     * @return $this
     */
    public function setAircraftseen($aircraftseen)
    {

        if (($aircraftseen > 65535)) {
            throw new \InvalidArgumentException('invalid value for $aircraftseen when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($aircraftseen < 0)) {
            throw new \InvalidArgumentException('invalid value for $aircraftseen when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['aircraftseen'] = $aircraftseen;

        return $this;
    }

    /**
     * Gets flightsamended
     *
     * @return int
     */
    public function getFlightsamended()
    {
        return $this->container['flightsamended'];
    }

    /**
     * Sets flightsamended
     *
     * @param int $flightsamended flightsamended
     *
     * @return $this
     */
    public function setFlightsamended($flightsamended)
    {

        if (($flightsamended > 65535)) {
            throw new \InvalidArgumentException('invalid value for $flightsamended when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($flightsamended < 0)) {
            throw new \InvalidArgumentException('invalid value for $flightsamended when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['flightsamended'] = $flightsamended;

        return $this;
    }

    /**
     * Gets handoffsinitiated
     *
     * @return int
     */
    public function getHandoffsinitiated()
    {
        return $this->container['handoffsinitiated'];
    }

    /**
     * Sets handoffsinitiated
     *
     * @param int $handoffsinitiated handoffsinitiated
     *
     * @return $this
     */
    public function setHandoffsinitiated($handoffsinitiated)
    {

        if (($handoffsinitiated > 65535)) {
            throw new \InvalidArgumentException('invalid value for $handoffsinitiated when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($handoffsinitiated < 0)) {
            throw new \InvalidArgumentException('invalid value for $handoffsinitiated when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['handoffsinitiated'] = $handoffsinitiated;

        return $this;
    }

    /**
     * Gets handoffsreceived
     *
     * @return int
     */
    public function getHandoffsreceived()
    {
        return $this->container['handoffsreceived'];
    }

    /**
     * Sets handoffsreceived
     *
     * @param int $handoffsreceived handoffsreceived
     *
     * @return $this
     */
    public function setHandoffsreceived($handoffsreceived)
    {

        if (($handoffsreceived > 65535)) {
            throw new \InvalidArgumentException('invalid value for $handoffsreceived when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($handoffsreceived < 0)) {
            throw new \InvalidArgumentException('invalid value for $handoffsreceived when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['handoffsreceived'] = $handoffsreceived;

        return $this;
    }

    /**
     * Gets handoffsrefused
     *
     * @return int
     */
    public function getHandoffsrefused()
    {
        return $this->container['handoffsrefused'];
    }

    /**
     * Sets handoffsrefused
     *
     * @param int $handoffsrefused handoffsrefused
     *
     * @return $this
     */
    public function setHandoffsrefused($handoffsrefused)
    {

        if (($handoffsrefused > 65535)) {
            throw new \InvalidArgumentException('invalid value for $handoffsrefused when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($handoffsrefused < 0)) {
            throw new \InvalidArgumentException('invalid value for $handoffsrefused when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['handoffsrefused'] = $handoffsrefused;

        return $this;
    }

    /**
     * Gets squawksassigned
     *
     * @return int
     */
    public function getSquawksassigned()
    {
        return $this->container['squawksassigned'];
    }

    /**
     * Sets squawksassigned
     *
     * @param int $squawksassigned squawksassigned
     *
     * @return $this
     */
    public function setSquawksassigned($squawksassigned)
    {

        if (($squawksassigned > 65535)) {
            throw new \InvalidArgumentException('invalid value for $squawksassigned when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($squawksassigned < 0)) {
            throw new \InvalidArgumentException('invalid value for $squawksassigned when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['squawksassigned'] = $squawksassigned;

        return $this;
    }

    /**
     * Gets cruisealtsmodified
     *
     * @return int
     */
    public function getCruisealtsmodified()
    {
        return $this->container['cruisealtsmodified'];
    }

    /**
     * Sets cruisealtsmodified
     *
     * @param int $cruisealtsmodified cruisealtsmodified
     *
     * @return $this
     */
    public function setCruisealtsmodified($cruisealtsmodified)
    {

        if (($cruisealtsmodified > 65535)) {
            throw new \InvalidArgumentException('invalid value for $cruisealtsmodified when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($cruisealtsmodified < 0)) {
            throw new \InvalidArgumentException('invalid value for $cruisealtsmodified when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['cruisealtsmodified'] = $cruisealtsmodified;

        return $this;
    }

    /**
     * Gets tempaltsmodified
     *
     * @return int
     */
    public function getTempaltsmodified()
    {
        return $this->container['tempaltsmodified'];
    }

    /**
     * Sets tempaltsmodified
     *
     * @param int $tempaltsmodified tempaltsmodified
     *
     * @return $this
     */
    public function setTempaltsmodified($tempaltsmodified)
    {

        if (($tempaltsmodified > 65535)) {
            throw new \InvalidArgumentException('invalid value for $tempaltsmodified when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($tempaltsmodified < 0)) {
            throw new \InvalidArgumentException('invalid value for $tempaltsmodified when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['tempaltsmodified'] = $tempaltsmodified;

        return $this;
    }

    /**
     * Gets scratchpadmods
     *
     * @return int
     */
    public function getScratchpadmods()
    {
        return $this->container['scratchpadmods'];
    }

    /**
     * Sets scratchpadmods
     *
     * @param int $scratchpadmods scratchpadmods
     *
     * @return $this
     */
    public function setScratchpadmods($scratchpadmods)
    {

        if (($scratchpadmods > 65535)) {
            throw new \InvalidArgumentException('invalid value for $scratchpadmods when calling ATCSessions., must be smaller than or equal to 65535.');
        }
        if (($scratchpadmods < 0)) {
            throw new \InvalidArgumentException('invalid value for $scratchpadmods when calling ATCSessions., must be bigger than or equal to 0.');
        }

        $this->container['scratchpadmods'] = $scratchpadmods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


