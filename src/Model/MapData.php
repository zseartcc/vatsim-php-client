<?php
/**
 * MapData
 *
 * PHP version 5
 *
 * @category Class
 * @package  VATSIM\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VATSIM API
 *
 * API for VATSIM. This API only accepts and returns application/json - e-mail api@vatsim.net for troubleshooting
 *
 * OpenAPI spec version: v1
 * Contact: api@vatsim.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VATSIM\Client\Model;

use \ArrayAccess;
use \VATSIM\Client\ObjectSerializer;

/**
 * MapData Class Doc Comment
 *
 * @category Class
 * @package  VATSIM\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MapData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MapData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currentCommitHash' => 'string',
        'firBoundariesDatUrl' => 'string',
        'vatspyDatUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currentCommitHash' => null,
        'firBoundariesDatUrl' => 'uri',
        'vatspyDatUrl' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currentCommitHash' => 'current_commit_hash',
        'firBoundariesDatUrl' => 'fir_boundaries_dat_url',
        'vatspyDatUrl' => 'vatspy_dat_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currentCommitHash' => 'setCurrentCommitHash',
        'firBoundariesDatUrl' => 'setFirBoundariesDatUrl',
        'vatspyDatUrl' => 'setVatspyDatUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currentCommitHash' => 'getCurrentCommitHash',
        'firBoundariesDatUrl' => 'getFirBoundariesDatUrl',
        'vatspyDatUrl' => 'getVatspyDatUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currentCommitHash'] = isset($data['currentCommitHash']) ? $data['currentCommitHash'] : '';
        $this->container['firBoundariesDatUrl'] = isset($data['firBoundariesDatUrl']) ? $data['firBoundariesDatUrl'] : null;
        $this->container['vatspyDatUrl'] = isset($data['vatspyDatUrl']) ? $data['vatspyDatUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['currentCommitHash']) && (mb_strlen($this->container['currentCommitHash']) < 1)) {
            $invalidProperties[] = "invalid value for 'currentCommitHash', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['firBoundariesDatUrl'] === null) {
            $invalidProperties[] = "'firBoundariesDatUrl' can't be null";
        }
        if ((mb_strlen($this->container['firBoundariesDatUrl']) < 1)) {
            $invalidProperties[] = "invalid value for 'firBoundariesDatUrl', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['vatspyDatUrl'] === null) {
            $invalidProperties[] = "'vatspyDatUrl' can't be null";
        }
        if ((mb_strlen($this->container['vatspyDatUrl']) < 1)) {
            $invalidProperties[] = "invalid value for 'vatspyDatUrl', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currentCommitHash
     *
     * @return string
     */
    public function getCurrentCommitHash()
    {
        return $this->container['currentCommitHash'];
    }

    /**
     * Sets currentCommitHash
     *
     * @param string $currentCommitHash currentCommitHash
     *
     * @return $this
     */
    public function setCurrentCommitHash($currentCommitHash)
    {

        if (!is_null($currentCommitHash) && (mb_strlen($currentCommitHash) < 1)) {
            throw new \InvalidArgumentException('invalid length for $currentCommitHash when calling MapData., must be bigger than or equal to 1.');
        }

        $this->container['currentCommitHash'] = $currentCommitHash;

        return $this;
    }

    /**
     * Gets firBoundariesDatUrl
     *
     * @return string
     */
    public function getFirBoundariesDatUrl()
    {
        return $this->container['firBoundariesDatUrl'];
    }

    /**
     * Sets firBoundariesDatUrl
     *
     * @param string $firBoundariesDatUrl firBoundariesDatUrl
     *
     * @return $this
     */
    public function setFirBoundariesDatUrl($firBoundariesDatUrl)
    {

        if ((mb_strlen($firBoundariesDatUrl) < 1)) {
            throw new \InvalidArgumentException('invalid length for $firBoundariesDatUrl when calling MapData., must be bigger than or equal to 1.');
        }

        $this->container['firBoundariesDatUrl'] = $firBoundariesDatUrl;

        return $this;
    }

    /**
     * Gets vatspyDatUrl
     *
     * @return string
     */
    public function getVatspyDatUrl()
    {
        return $this->container['vatspyDatUrl'];
    }

    /**
     * Sets vatspyDatUrl
     *
     * @param string $vatspyDatUrl vatspyDatUrl
     *
     * @return $this
     */
    public function setVatspyDatUrl($vatspyDatUrl)
    {

        if ((mb_strlen($vatspyDatUrl) < 1)) {
            throw new \InvalidArgumentException('invalid length for $vatspyDatUrl when calling MapData., must be bigger than or equal to 1.');
        }

        $this->container['vatspyDatUrl'] = $vatspyDatUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


